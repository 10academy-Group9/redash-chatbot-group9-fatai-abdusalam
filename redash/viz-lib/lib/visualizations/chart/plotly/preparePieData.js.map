{"version":3,"file":"preparePieData.js","names":["_lodash","require","_d","_interopRequireDefault","_chooseTextColorForBackground","_ColorPalette","_utils","obj","__esModule","default","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","getPieDimensions","series","rows","cellsInRow","Math","ceil","cellWidth","cellHeight","xPadding","yPadding","getPieHoverInfoPattern","options","hasX","test","textFormat","result","prepareSeries","additionalOptions","index","hoverInfoPattern","getValueColor","seriesOptions","extend","type","globalSeriesType","yAxis","name","xPosition","yPosition","floor","labelsValuesDict","sourceData","Map","seriesTotal","reduce","data","row","y","cleanNumber","abs","each","x","normalizeValue","xAxis","concat","aggregatedY","set","yPercent","markerColors","map","Array","from","values","textColors","c","chooseTextColorForBackground","labels","visible","hole","marker","colors","hoverinfo","text","textinfo","showDataLabels","textposition","textfont","color","direction","domain","preparePieData","seriesList","getDefaultColor","d3","scale","ordinal","range","ColorPaletteArray","valuesColors","valuesOptions","item","isString","includes","columnMapping","v"],"sources":["../../../../src/visualizations/chart/plotly/preparePieData.ts"],"sourcesContent":["import { isString, each, extend, includes, map, reduce } from \"lodash\";\nimport d3 from \"d3\";\nimport chooseTextColorForBackground from \"@/lib/chooseTextColorForBackground\";\nimport { ColorPaletteArray } from \"@/visualizations/ColorPalette\";\n\nimport { cleanNumber, normalizeValue } from \"./utils\";\n\nexport function getPieDimensions(series: any) {\n  const rows = series.length > 2 ? 2 : 1;\n  const cellsInRow = Math.ceil(series.length / rows);\n  const cellWidth = 1 / cellsInRow;\n  const cellHeight = 1 / rows;\n  const xPadding = 0.02;\n  const yPadding = 0.1;\n\n  return { rows, cellsInRow, cellWidth, cellHeight, xPadding, yPadding };\n}\n\nfunction getPieHoverInfoPattern(options: any) {\n  const hasX = /{{\\s*@@x\\s*}}/.test(options.textFormat);\n  let result = \"text\";\n  if (!hasX) result += \"+label\";\n  return result;\n}\n\nfunction prepareSeries(series: any, options: any, additionalOptions: any) {\n  const {\n    cellWidth,\n    cellHeight,\n    xPadding,\n    yPadding,\n    cellsInRow,\n    hasX,\n    index,\n    hoverInfoPattern,\n    getValueColor,\n  } = additionalOptions;\n\n  const seriesOptions = extend({ type: options.globalSeriesType, yAxis: 0 }, options.seriesOptions[series.name]);\n\n  const xPosition = (index % cellsInRow) * cellWidth;\n  const yPosition = Math.floor(index / cellsInRow) * cellHeight;\n\n  //we hold the labels and values in a dictionary so that we can aggregate multiple values for a single label\n  //once we reach the end of the data, we'll convert the dictionary to separate arrays for labels and values\n  const labelsValuesDict: { [key: string]: any } = {};\n\n  const sourceData = new Map();\n  const seriesTotal = reduce(\n    series.data,\n    (result, row) => {\n      const y = cleanNumber(row.y);\n      return result + Math.abs(y);\n    },\n    0\n  );\n  each(series.data, row => {\n    const x = hasX ? normalizeValue(row.x, options.xAxis.type) : `Slice ${index}`;\n    const y = cleanNumber(row.y);\n\n    if (x in labelsValuesDict){\n      labelsValuesDict[x] += y;\n    }\n    else{\n      labelsValuesDict[x] = y;\n    }\n    const aggregatedY = labelsValuesDict[x];\n\n    sourceData.set(x, {\n      x,\n      y: aggregatedY,\n      yPercent: (aggregatedY / seriesTotal) * 100,\n      row,\n    });\n  });\n\n  const markerColors = map(Array.from(sourceData.values()), data => getValueColor(data.row.x));\n  const textColors = map(markerColors, c => chooseTextColorForBackground(c));\n\n  const labels = Object.keys(labelsValuesDict);\n  const values = Object.values(labelsValuesDict);\n\n  return {\n    visible: true,\n    values,\n    labels,\n    type: \"pie\",\n    hole: 0.4,\n    marker: {\n      colors: markerColors,\n    },\n    hoverinfo: hoverInfoPattern,\n    text: [],\n    textinfo: options.showDataLabels ? \"percent\" : \"none\",\n    textposition: \"inside\",\n    textfont: {\n      color: textColors,\n    },\n    name: seriesOptions.name || series.name,\n    direction: options.direction.type,\n    domain: {\n      x: [xPosition, xPosition + cellWidth - xPadding],\n      y: [yPosition, yPosition + cellHeight - yPadding],\n    },\n    sourceData,\n  };\n}\n\nexport default function preparePieData(seriesList: any, options: any) {\n  // we will use this to assign colors for values that have no explicitly set color\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'scale' does not exist on type 'typeof im... Remove this comment to see the full error message\n  const getDefaultColor = d3.scale\n    .ordinal()\n    .domain([])\n    .range(ColorPaletteArray);\n  const valuesColors = {};\n  each(options.valuesOptions, (item, key) => {\n    if (isString(item.color) && item.color !== \"\") {\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      valuesColors[key] = item.color;\n    }\n  });\n\n  const additionalOptions = {\n    ...getPieDimensions(seriesList),\n    hasX: includes(options.columnMapping, \"x\"),\n    hoverInfoPattern: getPieHoverInfoPattern(options),\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    getValueColor: (v: any) => valuesColors[v] || getDefaultColor(v),\n  };\n\n  return map(seriesList, (series, index) => prepareSeries(series, options, { ...additionalOptions, index }));\n}\n"],"mappings":"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"}