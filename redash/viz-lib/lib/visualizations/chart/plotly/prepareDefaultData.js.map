{"version":3,"file":"prepareDefaultData.js","names":["_lodash","require","_chooseTextColorForBackground","_interopRequireDefault","_ColorPalette","_utils","obj","__esModule","default","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","getSeriesColor","seriesOptions","seriesIndex","color","ColorPaletteArray","getHoverInfoPattern","options","hasX","test","textFormat","hasName","result","prepareBarSeries","series","additionalOptions","type","offsetgroup","toString","index","showDataLabels","textposition","prepareLineSeries","mode","prepareAreaSeries","fill","stacking","prepareScatterSeries","prepareBubbleSeries","_ref","seriesColor","data","coefficient","marker","size","map","sizemode","prepareBoxSeries","_ref2","boxpoints","hoverinfo","showpoints","jitter","pointpos","prepareSeries","_additionalOptions","hoverInfoPattern","extend","globalSeriesType","yAxis","name","seriesYAxis","getSeriesAxis","sortX","sortBy","d","normalizeValue","x","xAxis","cleanYValue","includes","v","cleanNumber","missingValuesAsZero","isNil","sourceData","Map","labelsValuesDict","yErrorValues","each","row","y","yError","aggregatedY","set","yPercent","xValues","yValues","values","plotlySeries","visible","error_y","array","insidetextfont","chooseTextColorForBackground","yaxis","prepareDefaultData","seriesList"],"sources":["../../../../src/visualizations/chart/plotly/prepareDefaultData.ts"],"sourcesContent":["import { isNil, extend, each, includes, map, sortBy, toString } from \"lodash\";\nimport chooseTextColorForBackground from \"@/lib/chooseTextColorForBackground\";\nimport { ColorPaletteArray } from \"@/visualizations/ColorPalette\";\nimport { cleanNumber, normalizeValue, getSeriesAxis } from \"./utils\";\n\nfunction getSeriesColor(seriesOptions: any, seriesIndex: any) {\n  return seriesOptions.color || ColorPaletteArray[seriesIndex % ColorPaletteArray.length];\n}\n\nfunction getHoverInfoPattern(options: any) {\n  const hasX = /{{\\s*@@x\\s*}}/.test(options.textFormat);\n  const hasName = /{{\\s*@@name\\s*}}/.test(options.textFormat);\n  let result = \"text\";\n  if (!hasX) result += \"+x\";\n  if (!hasName) result += \"+name\";\n  return result;\n}\n\nfunction prepareBarSeries(series: any, options: any, additionalOptions: any) {\n  series.type = \"bar\";\n  series.offsetgroup = toString(additionalOptions.index);\n  if (options.showDataLabels) {\n    series.textposition = \"inside\";\n  }\n  return series;\n}\n\nfunction prepareLineSeries(series: any, options: any) {\n  series.mode = \"lines\" + (options.showDataLabels ? \"+text\" : \"\");\n  return series;\n}\n\nfunction prepareAreaSeries(series: any, options: any) {\n  series.mode = \"lines\" + (options.showDataLabels ? \"+text\" : \"\");\n  series.fill = options.series.stacking ? \"tonexty\" : \"tozeroy\";\n  return series;\n}\n\nfunction prepareScatterSeries(series: any, options: any) {\n  series.type = \"scatter\";\n  series.mode = \"markers\" + (options.showDataLabels ? \"+text\" : \"\");\n  return series;\n}\n\nfunction prepareBubbleSeries(series: any, options: any, { seriesColor, data }: any) {\n  const coefficient = options.coefficient || 1;\n  series.mode = \"markers\";\n  series.marker = {\n    color: seriesColor,\n    size: map(data, i => i.size * coefficient),\n    sizemode: options.sizemode || \"diameter\",\n  };\n  return series;\n}\n\nfunction prepareBoxSeries(series: any, options: any, { seriesColor }: any) {\n  series.type = \"box\";\n  series.mode = \"markers\";\n\n  series.boxpoints = \"outliers\";\n  series.hoverinfo = false;\n  series.marker = {\n    color: seriesColor,\n    size: 3,\n  };\n  if (options.showpoints) {\n    series.boxpoints = \"all\";\n    series.jitter = 0.3;\n    series.pointpos = -1.8;\n  }\n  return series;\n}\n\nfunction prepareSeries(series: any, options: any, additionalOptions: any) {\n  const { hoverInfoPattern, index } = additionalOptions;\n\n  const seriesOptions = extend({ type: options.globalSeriesType, yAxis: 0 }, options.seriesOptions[series.name]);\n  const seriesColor = getSeriesColor(seriesOptions, index);\n  const seriesYAxis = getSeriesAxis(series, options);\n\n  // Sort by x - `Map` preserves order of items\n  const data = options.sortX ? sortBy(series.data, d => normalizeValue(d.x, options.xAxis.type)) : series.data;\n\n  // For bubble/scatter charts `y` may be any (similar to `x`) - numeric is only bubble size;\n  // for other types `y` is always number\n  const cleanYValue = includes([\"bubble\", \"scatter\"], seriesOptions.type)\n    ? normalizeValue\n    : (v: any) => {\n        v = cleanNumber(v);\n        return options.missingValuesAsZero && isNil(v) ? 0.0 : v;\n      };\n\n  const sourceData = new Map();\n\n  //we hold the labels and values in a dictionary so that we can aggregate multiple values for a single label\n  //once we reach the end of the data, we'll convert the dictionary to separate arrays for labels and values\n  const labelsValuesDict: { [key: string]: any } = {};\n\n  const yErrorValues: any = [];\n  each(data, row => {\n    const x = normalizeValue(row.x, options.xAxis.type); // number/datetime/category\n    const y = cleanYValue(row.y, seriesYAxis === \"y2\" ? options.yAxis[1].type : options.yAxis[0].type); // depends on series type!\n    const yError = cleanNumber(row.yError); // always number\n    const size = cleanNumber(row.size); // always number\n    if (x in labelsValuesDict){\n      labelsValuesDict[x] += y;\n    }\n    else{\n      labelsValuesDict[x] = y;\n    }\n    const aggregatedY = labelsValuesDict[x];\n\n    sourceData.set(x, {\n      x,\n      y: aggregatedY,\n      yError,\n      size,\n      yPercent: null, // will be updated later\n      row,\n    });\n    yErrorValues.push(yError);\n  });\n\n  const xValues = Object.keys(labelsValuesDict);\n  const yValues = Object.values(labelsValuesDict);\n\n  const plotlySeries = {\n    visible: true,\n    hoverinfo: hoverInfoPattern,\n    x: xValues,\n    y: yValues,\n    error_y: {\n      array: yErrorValues,\n      color: seriesColor,\n    },\n    name: seriesOptions.name || series.name,\n    marker: { color: seriesColor },\n    insidetextfont: {\n      color: chooseTextColorForBackground(seriesColor),\n    },\n    yaxis: seriesYAxis,\n    sourceData,\n  };\n\n  additionalOptions = { ...additionalOptions, seriesColor, data };\n\n  switch (seriesOptions.type) {\n    case \"column\":\n      return prepareBarSeries(plotlySeries, options, additionalOptions);\n    case \"line\":\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 3.\n      return prepareLineSeries(plotlySeries, options, additionalOptions);\n    case \"area\":\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 3.\n      return prepareAreaSeries(plotlySeries, options, additionalOptions);\n    case \"scatter\":\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 3.\n      return prepareScatterSeries(plotlySeries, options, additionalOptions);\n    case \"bubble\":\n      return prepareBubbleSeries(plotlySeries, options, additionalOptions);\n    case \"box\":\n      return prepareBoxSeries(plotlySeries, options, additionalOptions);\n    default:\n      return plotlySeries;\n  }\n}\n\nexport default function prepareDefaultData(seriesList: any, options: any) {\n  const additionalOptions = {\n    hoverInfoPattern: getHoverInfoPattern(options),\n  };\n\n  return map(seriesList, (series, index) => prepareSeries(series, options, { ...additionalOptions, index }));\n}\n"],"mappings":"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"}